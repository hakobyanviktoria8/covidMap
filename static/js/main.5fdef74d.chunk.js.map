{"version":3,"sources":["serviceWorker.js","CovidMap/Running.js","CovidMap/Table.js","CovidMap/SearchCountry.js","CovidMap/sevagir.js","index.js"],"names":["Boolean","window","location","hostname","match","Running","props","getCountries","a","axios","get","res","countries","data","groupedCountries","map","x","hasOwnProperty","countryRegion","push","totalGroupedCountries","Object","values","oneCountries","length","confirmed","c","reduce","b","recovered","active","deaths","lastUpdate","sort","setState","rowData","console","log","state","onClickBtn","selectedCountriesName","gridApi","getSelectedNodes","node","join","alert","formatter","buildFormatter","frenchStrings","columnDefs","headerName","field","sortable","filter","checkboxSelection","width","cellRendererFramework","date","value","className","Button","style","margin","color","onClick","this","rowSelection","onGridReady","params","api","React","Component","ReactDOM","render","Container","fluid","Row","Col","xs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fdef74d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport axios from 'axios';\r\nimport TimeAgo from 'react-timeago';\r\nimport  { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport frenchStrings from 'react-timeago/lib/language-strings/fr';\r\nimport buildFormatter from 'react-timeago/lib/formatters/buildFormatter';\r\nimport 'ag-grid-enterprise';\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nclass Running extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        //hoc url + data ->\r\n        this.getCountries();\r\n        this.state = {\r\n            formatter : buildFormatter(frenchStrings),\r\n            countries:[],\r\n            columnDefs: [\r\n                // { headerName: \"N\", field: \"n\" },  rowGroup:true\r\n                { headerName: \"Country\", field: \"countryRegion\", sortable: true, filter: true, checkboxSelection: true},\r\n                { headerName: \"Confirmed\", field: \"confirmed\", sortable: true, filter: true, width:150},\r\n                { headerName: \"Recovered\", field: \"recovered\", sortable: true, filter: true, width:150},\r\n                { headerName: \"Active\", field: \"active\", sortable: true, filter: true, width:150},\r\n                { headerName: \"Deaths\", field: \"deaths\", sortable: true, filter: true, width:150},\r\n                { headerName: \"Last Update\", field: \"lastUpdate\", sortable: true, filter: true, width:150,\r\n                    cellRendererFramework: function (props) {\r\n                        return <TimeAgo date={props.value} />;\r\n                    }\r\n                },\r\n            ],\r\n            rowData: [],\r\n        }\r\n    }\r\n    getCountries = async () => {\r\n        let res = await axios.get(`https://covid19.mathdro.id/api/confirmed`);\r\n        let countries  = res.data;\r\n        // console.log(countries);\r\n        let groupedCountries = {};\r\n        countries.map(x => !groupedCountries.hasOwnProperty(x.countryRegion) ?\r\n            groupedCountries[x.countryRegion] = [x] : groupedCountries[x.countryRegion].push(x));\r\n        // console.log(groupedCountries);\r\n        let totalGroupedCountries = Object.values(groupedCountries);\r\n        // console.log(totalGroupedCountries);\r\n\r\n\r\n        // let oneCountries = totalGroupedCountries.map((x,index) => x.length === 1 ? Object.assign(x[0],{n : index+1})\r\n        let oneCountries = totalGroupedCountries.map(x => x.length === 1 ? x[0]\r\n            : x = {\r\n                // n: index+1,\r\n                countryRegion : x[0].countryRegion,\r\n                confirmed : x.map(c => c.confirmed).reduce((a,b)=>a+b),\r\n                recovered :  x.map(c => c.recovered).reduce((a,b)=>a+b),\r\n                active :  x.map(c => c.active).reduce((a,b)=>a+b),\r\n                deaths :  x.map(c => c.deaths).reduce((a,b)=>a+b),\r\n                lastUpdate : x[0].lastUpdate,\r\n            });\r\n        // console.log(oneCountries);\r\n        oneCountries = oneCountries.sort((a,b)=>b.confirmed-a.confirmed);\r\n        // console.log(oneCountries[0].lastUpdate);\r\n\r\n        // oneCountries.lastUpdate = oneCountries.map(x => x.lastUpdate = (<TimeAgo date={x.lastUpdate} />).toString() );\r\n        // console.log(oneCountries);\r\n        // console.log(this.state.rowData[0]);\r\n        this.setState(\r\n            {rowData: oneCountries}\r\n        );\r\n        console.log(\"rowData_____________________\",this.state.rowData)\r\n    };\r\n    onClickBtn=()=>{\r\n        const selectedCountries = this.gridApi.getSelectedNodes();\r\n        // console.log(selectedCountries);\r\n        const selectedCountriesName = selectedCountries.map(node => node.data.countryRegion).join(\", \");\r\n        // console.log(selectedCountriesName);\r\n        alert(selectedCountriesName);\r\n    };\r\n    render(){\r\n        console.log(\"render\");\r\n        return (\r\n            <div className=\"ag-theme-alpine table\">\r\n                {/*<TimeAgo date='Feb 1, 1966' />*/}\r\n                {/*<TimeAgo date={new Date(1590165163000)} />*/}\r\n                {/*<TimeAgo date={1590165163000} />*/}\r\n\r\n                <Button style={{margin: \"10px 40%\"}} color=\"secondary\" onClick={this.onClickBtn}>Get Selected Country</Button>{' '}\r\n\r\n                <AgGridReact\r\n                    columnDefs={this.state.columnDefs}\r\n                    rowData={this.state.rowData}\r\n                    rowSelection = \"multiple\"\r\n                    onGridReady = {params => this.gridApi = params.api}\r\n                />\r\n            </div>\r\n        );\r\n        // return(\r\n        //     <tbody>\r\n        //         { this.state.countries.map((country,index) =>\r\n        //             <tr key={index.toString()}>\r\n        //                 <td style={{width:\"50px\"}}>{index +1}</td>\r\n        //                 <td style={{textAlign:\"left\",width:\"200px\"}}>{country.countryRegion}</td>\r\n        //                 <td style={{width:\"100px\"}}>{country.confirmed}</td>\r\n        //                 <td style={{width:\"100px\"}}>{country.recovered}</td>\r\n        //                 <td style={{width:\"90px\"}}>{country.active}</td>\r\n        //                 <td style={{width:\"90px\"}}>{country.deaths}</td>\r\n        //                 <td style={{width:\"150px\"}}><TimeAgo date={country.lastUpdate} /></td>\r\n        //             </tr>\r\n        //         )\r\n        //         }\r\n        //     </tbody>\r\n        // )\r\n    }\r\n}\r\nexport default Running\r\n","import React from \"react\"\r\nimport Running from \"./Running\";\r\n\r\nclass CountryTable extends React.Component{\r\n render(){\r\n     return(\r\n         <div className=\"searchTable\">\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th style={{width:\"50px\"}}>N</th>\r\n                    <th style={{width:\"200px\"}}>Country</th>\r\n                    <th style={{width:\"100px\"}}>Confirmed</th>\r\n                    <th style={{width:\"100px\"}}>Recovered</th>\r\n                    <th style={{width:\"90px\"}}>Active</th>\r\n                    <th style={{width:\"90px\"}}>Deaths</th>\r\n                    <th style={{width:\"150px\"}}>Last Update</th>\r\n                </tr>\r\n                </thead>\r\n                <Running />\r\n            </table>\r\n         </div>\r\n     )\r\n }\r\n}\r\nexport default CountryTable;","import React from \"react\"\r\nclass SearchCountry extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"searchCountry\">\r\n                <input id=\"inputValue\" type=\"search\" placeholder=\"SearchCountry\"/>\r\n                <button id=\"inputSearch\">O\\</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchCountry","import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { AgGridReact } from 'ag-grid-react';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nclass AppSevagir extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n                { headerName: \"N\", field: \"n\" },\r\n                { headerName: \"Country\", field: \"country\" },\r\n                { headerName: \"Confirmed\", field: \"confirmed\" },\r\n                { headerName: \"Recovered\", field: \"recovered\" },\r\n                { headerName: \"Active\", field: \"active\" },\r\n                { headerName: \"Deaths\", field: \"deaths\" },\r\n                { headerName: \"Last Update\", field: \"lastUpdate\" },\r\n                ],\r\n            rowData: [\r\n                {\r\n                    n: \"n\",\r\n                    country: \"country\",\r\n                    confirmed:\"confirmed\",\r\n                    recovered:\"recovered\",\r\n                    active:\"active\",\r\n                    deaths:\"deaths\",\r\n                    lastUpdate:\"lastUpdate\",\r\n                },\r\n\r\n                ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ag-theme-alpine\" style={ {height: '600px', width: '1450px'} }>\r\n                <AgGridReact\r\n                    columnDefs={this.state.columnDefs}\r\n                    rowData={this.state.rowData}>\r\n                </AgGridReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppSevagir","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CountryTable from \"./CovidMap/Table\";\n// import Grafic from \"./CovidMap/Grafic\";\nimport { Container, Row, Col } from 'reactstrap';\nimport SearchCountry from \"./CovidMap/SearchCountry\";\n\nimport  { Component } from 'react';\nimport { render } from 'react-dom';\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport AppSevagir from \"./CovidMap/sevagir\";\nimport Running from \"./CovidMap/Running\";\n\nReactDOM.render(\n        <Container className=\"themed-container\" fluid={true}>\n            <Row className =\"bgColor\">\n                <Col xs=\"12\"><h1>COVID-19 Dashboard by the Center for Systems Science</h1></Col>\n                {/*<Col xs=\"3\"><SearchCountry /></Col>*/}\n            </Row>\n            <Row>\n                <Running />\n                {/*<Col xs=\"7\"><CountryTable /></Col>*/}\n                {/*<Col xs=\"5\"><Grafic /></Col>*/}\n                {/*<Col xs=\"12\"><AppSevagir /></Col>*/}\n            </Row>\n        </Container>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}